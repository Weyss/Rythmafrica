<!DOCTYPE html>
<html lang='fr'>

<head>
	<meta charset="UTF-8">
	<title>Admin
		{% block title %}{% endblock %}
	</title>
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
		integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
	{% block stylesheets %}{% endblock %}
</head>

<body>
	<header>
		<!--  Barre de navgiation  -->
		<nav class="navbar navbar-expand-lg navbar-light bg-primary">
			<a class="navbar-brand" href="{{ path('admin') }}" style="font-size:3em">DashBoard</a>
			<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
				aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
				<span class="navbar-toggler-icon"></span>
			</button>
			<div class="collapse navbar-collapse" id="navbarNav">
				<ul class="navbar-nav" style="font-size:1.3rem">
					<li class="nav-item">
						<a class="nav-link" href="{{ path('admin_artists') }}">Artistes</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="{{ path('admin_musics') }}">Musiques</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="{{ path('admin_events') }}">Événements</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="{{ path('admin_categories') }}">Catégories</a>
					</li>
				</ul>
			</div>
			<div class="collapse navbar-collapse py-1 justify-content-end" id="navbarText">
				<p class="m-0">Bienvenue Admin -</p>
				<a href="{{ path('app_logout') }}" class="btn btn-sm btn-light ml-1" type="button">Log Out</a>
			</div>
		</nav>
	</header>
	{% block body %}{% endblock %}
	{# Modals #}
	{# Formulaire d'ajout #}
	<div class="modal fade" id="form" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
		aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Formulaire</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body"></div>
			</div>
		</div>
	</div>
	{# Formulaire de suppression #}
	<div class="modal fade" id="delete" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLabel">Confirmation de la suppression</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					Êtes-vous sûr de vouloir supprimer cet element ?
				</div>
				<div class="modal-footer">
					<form action="#" id="formdelete" method="POST">
						<input type="hidden" value="" name="id" id="deleteId">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
						<button type="submit" class="btn btn-primary">Supprimer</button>
					</form>
				</div>
			</div>
		</div>
	</div>


	{% block javascripts %}
	{% endblock %}

	<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
		integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
		crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
		integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
		crossorigin="anonymous"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
		integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
		crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.min.js"></script>
	<script>
		// FONCTIONS //
		// Fonction pour faire apparaitre la modal et y insérer le formulaire
		function insertForm(url) {
			let httpRequest = new XMLHttpRequest;
			httpRequest.onreadystatechange = function () {
				if (httpRequest.readyState === httpRequest.DONE && httpRequest.status == 200) {

					$('#form').modal('show');

					let form = document.querySelector('#form .modal-body');

					form.innerHTML = httpRequest.responseText;

					bsCustomFileInput.init()
					
					let formAdd = document.querySelector('#form form');

					formAdd.addEventListener('submit', submitData);
				}
			}
			httpRequest.open('POST', url, true);
			httpRequest.send();
		}
		//Fonction pour supprimer un artist
		function remove(e) {
			e.preventDefault();
			let url = this.getAttribute('href');
			let entity = this.dataset.entity; //ton entité mise à jour !

			$('#delete').modal('show');
			let formDelete = document.querySelector('#delete form');
			formDelete.addEventListener('submit', function (e) {

				e.preventDefault();
				let xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function () {
					if (xhr.readyState === xhr.DONE && xhr.status == 200) {
						$('#delete').modal('hide');
						// Récupération des données JSON
						let newData = JSON.parse(xhr.responseText);
						switch (entity) {
							case "artist":
								updateDataArtist(newData);
								break;
							case "category":
								updateDataCategory(newData);
								break;
							case "music":
								updateDataMusic(newData);
								break;
							case "event":
								updateDataEvent(newData);
								break;
						}
					}
				}
				xhr.open('POST', url, true);
				xhr.send();
			});
		}
		//Fonction pour éditer un artist
		function modify(e) {
			e.preventDefault();
			let url = this.getAttribute('href');
			let entity = this.dataset.entity;
			let httpRequest = new XMLHttpRequest;
			httpRequest.onreadystatechange = function () {
				if (httpRequest.readyState === httpRequest.DONE && httpRequest.status == 200) {
					$('#form').modal('show');

					let form = document.querySelector('#form .modal-body');

					form.innerHTML = httpRequest.responseText;

					bsCustomFileInput.init()
					
					let formAdd = document.querySelector('#form form');

					formAdd.addEventListener('submit', function (e) {
						e.preventDefault();
						let data = new FormData(e.target);
						let xhr = new XMLHttpRequest();
						xhr.onreadystatechange = function () {
							if (xhr.readyState === xhr.DONE && xhr.status == 200) {
								$('#form').modal('hide');

								//Récupération des données en JSON
								let newData = JSON.parse(xhr.responseText);
								switch (entity) {
									case "artist":
										updateDataArtist(newData);
										break;
									case "category":
										updateDataCategory(newData);
										break;
									case "music":
										updateDataMusic(newData);
										break;
									case "event":
										updateDataEvent(newData);
										break;
								}
							}
						}
						xhr.open('POST', url, true);
						xhr.send(data);
					});
				}
			}
			httpRequest.open('POST', url, true);
			httpRequest.send();
		}
		// Fonction pour la soumission du formulaire
		function submitData(e) {
			e.preventDefault();
			let data = new FormData(e.target);
			let xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function () {
				if (xhr.readyState === xhr.DONE && xhr.status == 200) {
					$('#form').modal('hide');
					//Récupération des données en JSON
					let newData = JSON.parse(xhr.responseText);
					switch (url) {
						case "{{ path('admin_artist_add') }}":
							updateDataArtist(newData);
							break;
						case "{{ path('admin_category_add') }}":
							updateDataCategory(newData);
							break;
						case "{{ path('admin_music_add') }}":
							updateDataMusic(newData);
							break;
						case "{{ path('admin_event_add') }}":
							updateDataEvent(newData);
							break;
					}
				}
			}
			xhr.open('POST', url, true);
			xhr.send(data);
		}
		//Fonction pour mettre à jour les données des artistes
		function updateDataArtist(newData) {
			let tableArtist = document.querySelector('table#js-artists tbody');
			let tr = document.createElement('tr');
			tableArtist.innerHTML = '';
			newData.forEach(function (data) {
				console.log(data);
				let tr = document.createElement('tr');
				let id = data.id;

				let tdPicture = document.createElement('td');
				let picture = document.createElement('img');
				picture.classList.add('card-img');
				picture.setAttribute('style', 'width:10rem; height: 10rem;');
				picture.setAttribute('src', `{{ asset('upload/artistPictures/${data.picture}') }}`);
				tdPicture.append(picture);

				// Pour le nom, prénom, la description et le pseudo
				let tdLastname = document.createElement('td');
				let tdFirstname = document.createElement('td');
				let tdDescription = document.createElement('td');
				let tdPseudo = document.createElement('td');

				// Pour les boutons avec ces classes et attributs
				let tdAction = document.createElement('td');
				tdAction.classList.add('d-flex', 'flex-column');
				// Pour l'édition
				let edit = document.createElement('a');
				let urlEdit = "{{ path('admin_artist_edit', {'id': 'id'}) }}";
				urlEdit = urlEdit.replace('id', id);
				edit.setAttribute('href', urlEdit);
				edit.setAttribute('data-entity', 'artist');
				edit.classList.add('btn', 'btn-primary', 'btn-sm');
				edit.innerText = 'Éditer';
				edit.addEventListener('click', modify)
				// Pour la suppression
				let supp = document.createElement('a');
				let urlDel = "{{ path('admin_artist_delete', {'id': 'id'}) }}";
				urlDel = urlDel.replace('id', id);
				supp.setAttribute('href', urlDel);
				supp.setAttribute('data-entity', 'artist');
				supp.classList.add('btn', 'btn-primary', 'btn-sm', 'mt-2');
				supp.innerText = 'Supprimer';
				supp.addEventListener('click', remove);
				tdAction.append(edit, supp);

				// Intégration des données dans les balises HTML correspondantes
				tdLastname.innerText = data.lastname;
				tdFirstname.innerText = data.firstname;
				tdPseudo.innerText = data.nickname;
				tdDescription.innerText = data.description;

				// On ajout tous les td dans le tr
				tr.append(tdPicture, tdLastname, tdFirstname, tdPseudo, tdDescription, tdAction);
				// On ajout le tr dans la table
				tableArtist.append(tr);
			})
		}
		//Fonction pour mettre à jour les données des categories
		function updateDataCategory(newData) {
			let tableCategory = document.querySelector('table#js-categories tbody');
			let tr = document.createElement('tr');

			tableCategory.innerHTML = '';
			newData.forEach(function (data) {
				console.log(data);
				let tr = document.createElement('tr');
				let id = data.id
				let tdPicture = document.createElement('td');
				let picture = document.createElement('img');
				picture.classList.add('card-img');
				picture.setAttribute('style', 'width:10rem; height: 10rem;');
				picture.setAttribute('src', `{{ asset('upload/categoryPictures/${data.picture}') }}`);
				tdPicture.append(picture);

				// Pour le nom, prénom, la description et le pseudo
				let tdName = document.createElement('td');
				let tdDescription = document.createElement('td');

				// Pour les boutons avec ces classes et attributs
				let tdAction = document.createElement('td');
				tdAction.classList.add('d-flex', 'flex-column');
				// Pour l'édition
				let edit = document.createElement('a');
				let urlEdit = "{{ path('admin_category_edit', {'id': 'id'}) }}";
				urlEdit = urlEdit.replace('id', id);
				edit.setAttribute('href', urlEdit);
				edit.setAttribute('data-entity', 'category');
				edit.classList.add('btn', 'btn-primary', 'btn-sm');
				edit.innerText = 'Éditer';
				edit.addEventListener('click', modify)
				// Pour la suppression
				let supp = document.createElement('a');
				let urlDel = "{{ path('admin_category_delete', {'id': 'id'}) }}";
				urlDel = urlDel.replace('id', id);
				supp.setAttribute('href', urlDel);
				supp.setAttribute('data-entity', 'category');
				supp.classList.add('btn', 'btn-primary', 'btn-sm', 'mt-2');
				supp.innerText = 'Supprimer';
				supp.addEventListener('click', remove);
				tdAction.append(edit, supp);

				// Intégration des données dans les balises HTML correspondantes
				tdName.innerText = data.name;
				tdDescription.innerText = data.description;

				// On ajout tous les td dans le tr
				tr.append(tdPicture, tdName, tdDescription, tdAction);
				// On ajout le tr dans la table
				tableCategory.append(tr);
			})
		}
		//Fonction pour mettre à jour les données des événements
		function updateDataEvent(newData) {
			let tableEvent = document.querySelector('table#js-events tbody');
			let tr = document.createElement('tr');

			tableEvent.innerHTML = '';
			newData.forEach(function (data) {
				let tr = document.createElement('tr');
				let id = data.id
				let tdPicture = document.createElement('td');
				let picture = document.createElement('img');
				picture.classList.add('card-img');
				picture.setAttribute('style', 'width:10rem; height: 10rem;');
				picture.setAttribute('src', `{{ asset('upload/eventPictures/${data.picture}') }}`);
				tdPicture.append(picture);

				// Pour le nom, prénom, la description et le pseudo
				let tdTitle = document.createElement('td');
				let tdDescription = document.createElement('td');

				// Pour les boutons avec ces classes et attributs
				let tdAction = document.createElement('td');
				tdAction.classList.add('d-flex', 'flex-column');
				// Pour l'édition
				let edit = document.createElement('a');
				let urlEdit = "{{ path('admin_event_edit', {'id': 'id'}) }}";
				urlEdit = urlEdit.replace('id', id);
				edit.setAttribute('href', urlEdit);
				edit.setAttribute('data-entity', 'event');
				edit.classList.add('btn', 'btn-primary', 'btn-sm');
				edit.innerText = 'Éditer';
				edit.addEventListener('click', modify)
				// Pour la suppression
				let supp = document.createElement('a');
				let urlDel = "{{ path('admin_event_delete', {'id': 'id'}) }}";
				urlDel = urlDel.replace('id', id);
				supp.setAttribute('href', urlDel);
				supp.setAttribute('data-entity', 'event');
				supp.classList.add('btn', 'btn-primary', 'btn-sm', 'mt-2');
				supp.innerText = 'Supprimer';
				supp.addEventListener('click', remove);
				tdAction.append(edit, supp);

				// Intégration des données dans les balises HTML correspondantes
				tdTitle.innerText = data.title;
				tdDescription.innerText = data.description;

				// On ajout tous les td dans le tr
				tr.append(tdPicture, tdTitle, tdDescription, tdAction);
				// On ajout le tr dans la table
				tableEvent.append(tr);
			})
		}
		//Fonction pour mettre à jour les données des musiques
		function updateDataMusic(newData) {
			let tableMusic = document.querySelector('table#js-musics tbody');
			let tr = document.createElement('tr');

			tableMusic.innerHTML = '';
			newData.forEach(function (data) {
				console.log(data);
				let tr = document.createElement('tr');
				let id = data.id
				let tdPicture = document.createElement('td');
				let picture = document.createElement('img');
				picture.classList.add('card-img');
				picture.setAttribute('style', 'width:10rem; height: 10rem;');
				picture.setAttribute('src', `{{ asset('upload/musicPictures/${data.picture}') }}`);
				tdPicture.append(picture);

				// Pour le titre, la description, le pseudo, la variété
				let tdTitle = document.createElement('td');
				let tdDescription = document.createElement('td');
				let tdArtist = document.createElement('td');
				let tdVariety = document.createElement('td');

				// Pour la balise audio
				let tdSong = document.createElement('td');
				let audio = document.createElement('audio');
				audio.setAttribute('src', `{{ asset('upload/songs/${data.music}') }}`);
				audio.setAttribute('style', 'border-radius:20px');
				audio.setAttribute('controls', '');
				tdSong.append(audio);
				// Pour les boutons avec ces classes et attributs
				let tdAction = document.createElement('td');
				tdAction.classList.add('d-flex', 'flex-column');
				// Pour l'édition
				let edit = document.createElement('a');
				let urlEdit = "{{ path('admin_music_edit', {'id': 'id'}) }}";
				urlEdit = urlEdit.replace('id', id);
				edit.setAttribute('href', urlEdit);
				edit.setAttribute('data-entity', 'music');
				edit.classList.add('btn', 'btn-primary', 'btn-sm');
				edit.innerText = 'Éditer';
				edit.addEventListener('click', modify)
				// Pour la suppression
				let supp = document.createElement('a');
				let urlDel = "{{ path('admin_music_delete', {'id': 'id'}) }}";
				urlDel = urlDel.replace('id', id);
				supp.setAttribute('href', urlDel);
				supp.setAttribute('data-entity', 'music');
				supp.classList.add('btn', 'btn-primary', 'btn-sm', 'mt-2');
				supp.innerText = 'Supprimer';
				supp.addEventListener('click', remove);
				tdAction.append(edit, supp);

				// Intégration des données dans les balises HTML correspondantes
				tdTitle.innerText = data.title;
				tdDescription.innerText = data.description;
				tdArtist.innerText = data.artist.nickname;
				tdVariety.innerText = data.category.name;
				// On ajout tous les td dans le tr
				tr.append(tdPicture, tdTitle, tdSong, tdVariety, tdArtist, tdDescription, tdAction);
				// On ajout le tr dans la table
				tableMusic.append(tr);
			})
		}

		document.addEventListener('DOMContentLoaded', function () {
			let getForm = document.querySelectorAll('.js-form');
			let del = document.querySelectorAll('a.js-delete');
			let edition = document.querySelectorAll('a.js-edit')

			// Pour faire apparaître la modale d'ajout
			getForm.forEach(function (form) {
				form.addEventListener('click', function () {
					switch (this.id) {
						case 'js-addArtist':
							url = "{{ path('admin_artist_add') }}";
							break;
						case 'js-addCategory':
							url = "{{ path('admin_category_add') }}";
							break;
						case 'js-addEvent':
							url = "{{ path('admin_event_add') }}";
							break;
						case 'js-addMusic':
							url = "{{ path('admin_music_add') }}";
							break;
					}
					insertForm(url);
				})
			})

			// Pour faire apparaitre la modale de suppression et afficher les nouvelles données
			del.forEach(function (supp) {
				supp.addEventListener('click', remove);
			});
			// Pour faire apparaitre la modale d'édition et afficher les nouvelles données
			edition.forEach(function (edit) {
				edit.addEventListener('click', modify);
			})
		})
	</script>
</body>

</html>